Download Here ---> https://tinyurl.com/ycx3x5fn?id=985949



Psu obfuscator roblox


Donate on GitHub
Protect your Lua Scripts Today!
You are 2 clicks away from obfuscating your Lua Script! Use the action buttons on the right to select from a wide range of obfuscation features after clicking Upload File or Demo.
Demo
Upload File
Join the community!
Issues? Bugs? or just want to say hello? Come join our freshly created community section and share your feedback. We are looking forward to hear from you!
Discord
Visit CommunityCopyrighted 2022-2023


CLEANUP Junk-If Reverse-If CFF v1* Literals MBAv1 Strings Table Indirection Minify* Beautify Demo VM* RESET


Lua online compiler


Write, Run & Share Lua code online using OneCompiler's Lua online compiler for free. It's one of the robust, feature-rich online compilers for Lua language, running the latest Lua version 5.3. Getting started with the OneCompiler's Lua editor is easy and fast. The editor shows sample boilerplate code when you choose language as Lua and start coding.


Taking inputs (stdin)


OneCompiler's Lua online editor supports stdin and users can give inputs to programs using the STDIN textbox under the I/O tab. Following is a sample Lua program which takes name as input and prints hello message with your name.


name = io.read("*a") print ("Hello ", name)


About Lua


Lua is a light weight embeddable scripting language which is built on top of C. It is used in almost all kind of applications like games, web applications, mobile applications, image processing etc. It's a very powerful, fast, easy to learn, open-source scripting language.


Syntax help


Variables



  
By default all the variables declared are global variables

  
If the variables are explicitly mentioned as local then they are local variables.

  
Lua is a dynamically typed language and hence only the values will have types not the variables.




Examples


-- global variables a = 10 -- local variables local x = 30

Value TypeDescriptionnumberRepresents numbersstringRepresents textnilDifferentiates values whether it has data or notbooleanValue can be either true or falsefunctionRepresents a sub-routineuserdataRepresents arbitary C datathreadRepresents independent threads of execution.tableCan hold any value except nil

Loops


1. While:


While is also used to iterate a set of statements based on a condition. Usually while is preferred when number of iterations are not known in advance.


while(condition) do --code end


2. Repeat-Until:


Repeat-Until is also used to iterate a set of statements based on a condition. It is very similar to Do-While, it is mostly used when you need to execute the statements atleast once.


repeat --code until( condition )


3. For:


For loop is used to iterate a set of statements based on a condition.


for init,max/min value, increment do --code end


Functions


Function is a sub-routine which contains set of statements. Usually functions are written when multiple calls are required to same set of statements which increase re-usuability and modularity.


optional_function_scope function function_name( argument1, argument2, argument3. argumentn) --code return params with comma seperated end


psuobfuscator/psuobfuscator


This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository.


Name already in use


A tag already exists with the provided branch name. Many Git commands accept both tag and branch names, so creating this branch may cause unexpected behavior. Are you sure you want to create this branch?


Sign In Required


Please sign in to use Codespaces.


Launching GitHub Desktop


If nothing happens, download GitHub Desktop and try again.


Launching GitHub Desktop


If nothing happens, download GitHub Desktop and try again.


Launching Xcode


If nothing happens, download Xcode and try again.


Launching Visual Studio Code


Your codespace will open once ready.


There was a problem preparing your codespace, please try again.
